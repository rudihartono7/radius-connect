// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RadiusConnect.Api.Data;

#nullable disable

namespace RadiusConnect.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.AppSettings", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("key");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_encrypted");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Key");

                    b.HasIndex("Category")
                        .HasDatabaseName("app_settings_category_idx");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("app_settings_updated_at_idx");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("app_settings");
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsTotpEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_totp_enabled");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TotpEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("totp_enabled");

                    b.Property<string>("TotpSecret")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("totp_secret");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("app_users_created_at_idx");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("app_users_email_idx");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("app_users_username_idx");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("action");

                    b.Property<Guid?>("ActorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("actor_id");

                    b.Property<string>("AfterDataJson")
                        .HasColumnType("json")
                        .HasColumnName("after_data");

                    b.Property<string>("BeforeDataJson")
                        .HasColumnType("json")
                        .HasColumnName("before_data");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("entity");

                    b.Property<string>("EntityId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("entity_id");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("ip_address");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("audit_log_action_idx");

                    b.HasIndex("ActorId")
                        .HasDatabaseName("audit_log_actor_id_idx");

                    b.HasIndex("Entity")
                        .HasDatabaseName("audit_log_entity_idx");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("audit_log_entity_id_idx");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("audit_log_timestamp_idx");

                    b.ToTable("audit_log");
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.CoaRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AcctSessionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("acctsessionid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("completed_at");

                    b.Property<string>("NasIp")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nas_ip");

                    b.Property<string>("RequestDataJson")
                        .HasColumnType("json")
                        .HasColumnName("request_data");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("request_type");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("requested_at");

                    b.Property<Guid?>("RequestedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("requested_by");

                    b.Property<string>("ResponseDataJson")
                        .HasColumnType("json")
                        .HasColumnName("response_data");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("AcctSessionId")
                        .HasDatabaseName("coa_requests_acctsessionid_idx");

                    b.HasIndex("RequestedAt")
                        .HasDatabaseName("coa_requests_requested_at_idx");

                    b.HasIndex("RequestedBy");

                    b.HasIndex("Status")
                        .HasDatabaseName("coa_requests_status_idx");

                    b.HasIndex("Username")
                        .HasDatabaseName("coa_requests_username_idx");

                    b.ToTable("coa_requests");
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.PolicyTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CheckAttributesJson")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("check_attributes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("ReplyAttributesJson")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("reply_attributes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("policy_templates_created_at_idx");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Name")
                        .HasDatabaseName("policy_templates_name_idx");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("policy_templates_updated_at_idx");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("policy_templates");
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.RbacRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PermissionsJson")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("permissions");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("rbac_roles_name_idx");

                    b.ToTable("rbac_roles");
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.RbacUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assigned_at");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("assigned_by");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("AssignedAt")
                        .HasDatabaseName("rbac_user_roles_assigned_at_idx");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("rbac_user_roles_role_id_idx");

                    b.HasIndex("UserId")
                        .HasDatabaseName("rbac_user_roles_user_id_idx");

                    b.ToTable("rbac_user_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RadiusConnect.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RadiusConnect.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadiusConnect.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RadiusConnect.Api.Models.Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.AppSettings", b =>
                {
                    b.HasOne("RadiusConnect.Api.Models.Domain.AppUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.AuditLog", b =>
                {
                    b.HasOne("RadiusConnect.Api.Models.Domain.AppUser", "Actor")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.CoaRequest", b =>
                {
                    b.HasOne("RadiusConnect.Api.Models.Domain.AppUser", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedBy");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.PolicyTemplate", b =>
                {
                    b.HasOne("RadiusConnect.Api.Models.Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("RadiusConnect.Api.Models.Domain.AppUser", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.RbacUserRole", b =>
                {
                    b.HasOne("RadiusConnect.Api.Models.Domain.AppUser", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedBy");

                    b.HasOne("RadiusConnect.Api.Models.Domain.RbacRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadiusConnect.Api.Models.Domain.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.AppUser", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RadiusConnect.Api.Models.Domain.RbacRole", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
